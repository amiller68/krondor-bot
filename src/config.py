import os
import yaml
import logging
from dotenv import load_dotenv

# Define the logger name
LOGGER_NAME = __name__

# TODO: replace this with a solution utilizing tracings + spans
# Define a custom log formatter to include chat and message IDs
class ChatBotLogFormatter(logging.Formatter):
    def format(self, record):
        # Each log generated by the chat bot should be tied to:
        #  - A chat ID: the ID of the chat the message is being sent to
        #  - A message ID: the ID of the message being sent
        
        if hasattr(record, 'chat_id'): 
            record.chat_id = record.chat_id
        # Note: this should never happen, but if it does, we'll just set the chat ID and message ID to N/A
        else:
            record.chat_id = 'N/A'
        
        if hasattr(record, 'message_id'):
            record.message_id = record.message_id
        # Note: this should never happen, but if it does, we'll just set the chat ID and message ID to N/A
        else:
            record.message_id = 'N/A'

        return super().format(record)

# TODO: for now, just read the config file. Eventually, configure via environment variables + command line args
#  Generally this thing is managing both config and some amount of state, which is not ideal
class AppConfig():
    config: any
    tg_token: str
    debug: bool
    logger: logging.Logger
    def __init__(self):
        # Open the config file
        with open('config.yml') as f:
            # Load the config file
            self.config = yaml.safe_load(f)

        load_dotenv()

        # Set the Telegram token
        self.tg_token = os.getenv("TG_TOKEN")

        # Determine if the --debug flag is set
        self.debug = os.getenv("DEBUG") == "true"

        # Create our logger
        logger = logging.getLogger(LOGGER_NAME)

        # Set the log formatter
        formatter = ChatBotLogFormatter('%(asctime)s - %(name)s - %(levelname)s - %(chat_id)s - %(message_id)s - %(message)s')

        # Create a logger depending on the debug flag
        if self.debug:
            logging.basicConfig(level=logging.DEBUG)
            handler = logging.StreamHandler()
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        else:
            logging.basicConfig(level=logging.INFO)
            handler = logging.FileHandler(self.config['log']['file'])
            handler.setFormatter(formatter)
            if logger.hasHandlers():
                logger.handlers.clear()
            logger.addHandler(handler)

        self.logger = logger

    def get_config(self) -> any:
        return self.config

    def get_tg_token(self) -> str:
        return self.tg_token

    def get_debug(self) -> bool:
        return self.debug

    def get_logger(self) -> logging.Logger:
        return self.logger
